name: Build and deploy through Github Package registry

on:
  push:
    branches: ["main"]

env:
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and push image to registry
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # https://github.com/marketplace/actions/docker-login
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # https://github.com/marketplace/actions/docker-metadata-action
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Create .env file
        uses: skiddph/actions-env@v1.0.2
        env:
          ENV_LUOSIMAO_TOKEN: ${{ secrets.LUOSIMAO_TOKEN }}
          ENV_SMS_SUFFIX: ${{ vars.SMS_SUFFIX }}
          ENV_VENDOR: ${{ vars.VENDOR }}

      # https://github.com/marketplace/actions/build-and-push-docker-images
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # TODO Deploy image
  pull-and-run:
    runs-on: ubuntu-latest
    steps:
      # https://github.com/marketplace/actions/docker-login
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # https://github.com/marketplace/actions/ssh-remote-commands
      - name: Pull image from registry
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.HOST_USERNAME }}
          password: ${{ secrets.HOST_PASSWORD }} # Refer to the doc if key should be used instead of password
          script_stop: true # allow script to exit when error is met
          script: if [ $(docker ps -aq --filter name=${{ env.IMAGE_NAME }}) ]; then docker rm -f ${{ }}; docker rmi -f ${{ env.IMAGE_NAME }}; fi\n\docker run --name ${{ env.IMAGE_NAME }} --restart always -d -p ${{ vars.PORT }}:3000 ${{ env.IMAGE_NAME }}
